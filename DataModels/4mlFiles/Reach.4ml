domain Topology {
    ID ::= Integer + String.
    Device ::= new (id:ID).
    Interface ::= new (id:ID, dev:Device).
    Subnet ::= new (id:ID).
    Idge ::= new (from:Interface, to:Interface).
    EdgeOut ::= new (from:Interface, to:Subnet). 
    EdgeIn ::= new (from:Subnet,to:Interface).
    Edge ::= EdgeOut + EdgeIn.
    
        
    conforms no { e | e is EdgeOut, f is EdgeIn, e.from = f.to, e.to = f.from}.
    conforms no { e | e is EdgeIn, f is EdgeOut, e.from = f.to, e.to = f.from}.
    conforms no { d | d is Device, i is Interface(_,d), j is Interface(_,d), i != j, no Idge(i,j)}.
}




domain Flow {
   ID ::= Integer + String.
   Ip ::= {0..4294967295}.
   Pn ::= {0..65535}.
   Pt ::= {IP,ICMP,IGMP,TCP,UDP}.
   Packet  ::= new (id:ID).
   IpRange ::= new (l:Ip, r:Ip).
   PnRange ::= new (l:Pn, r:Pn).
   SrcIp ::= new (p:Packet, IpRange).
   DstIp ::= new (p:Packet, IpRange).
   SrcPn ::= new (p:Packet, PnRange).
   DstPn ::= new (p:Packet, PnRange). 
   App   ::= new (p:Packet, Pt).
   
   IpPool ::= new (Ip).
   PnPool ::= new (Pn).
   PtPool ::= new (Pt).
   
   packet ::= (p:Packet,srcIp:Ip,dstIp:Ip, srcPn:Pn,dstPn:Pn,app:Pt).
   packet (p,srcip,0,0,0,IP) :-
       p is Packet, SrcIp(p, IpRange(l,r)), IpPool(srcip), srcip >= l, srcip <= r.
       
   flow ::= (id:ID,srcIp:Ip,dstIp:Ip,srcPn:Pn,dstPn:Pn,app:Pt).
   
   flow(id,srcip,dstip,srcpn,dstpn,app) :- 
       p is Packet(id), packet(p, srcip,dstip,srcpn,dstpn,app).   
       
    packet_to_flow ::= (p:Packet,f:flow).
    packet_to_flow(p,f) :-
        p is Packet(x), f is flow(x,_,_,_,_,_).
}

domain Reach includes Topology, Flow {
    Filter ::= new (e:Edge, fp:Packet).
    Transform ::= new (i:Idge, inp:Packet, outr:Packet).
    Path ::= new (Edge+Idge, any Path + {NIL}).
    
    reach ::= (p:Path,f:flow,g:flow).
    reach(Path(edge,NIL),flw,flw) :- edge is Edge, Filter(edge,pck),
        packet_to_flow(pck,flw).
    
    reach(Path(idge,NIL),fin,fout) :- idge is Idge, Transform(idge,pin,pout),
        packet_to_flow(pin,fin), packet_to_flow(pout,fout).
        
    reach(Path(edge,path),fin,fout) :- edge is Edge, Filter(edge,pck),
        packet_to_flow(pck,fin), reach(path,fin,fout).
        
    reach(Path(idge,NIL),fin,fout) :- idge is Idge, Transform(idge,pin,pout),
        packet_to_flow(pin,fin), packet_to_flow(pout,fmid), reach(path,fmid,fout).  
}


model FlowExample of Flow {
    IpPool(10). IpPool(20). IpPool(40). IpPool(15). IpPool(30).
    p is Packet("f1").
    SrcIp(p,IpRange(10,20)).
    DstIp(p,IpRange(40,40)).
    DstPn(p,PnRange(80,80)).
    DstPn(p,PnRange(443,443)).
    App(p,TCP).
}