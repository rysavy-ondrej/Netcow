/// This domain collects various types defined at other domains in Reachability namespace.
domain NetworkTypes {
	TrafficType ::= {   
		ARP,  
		BGP,  
		CDP,  
		DHCP,  
		DNS,  
		DTP,  
		EIGRP,  
		FTP,  
		H323,  
		HTTP,  
		HTTPS,		  
		ICMP,  
		ICMPV6,  
		IKE,  
		IPSEC,
		IPV4,
		IPV6,  
		LACP,  
		NAT,  
		NTP,  
		OSPF,  
		PAGP,  
		POP3,  
		RADIUS,  
		RIP_V1,  
		RIP_V2,  
		RTP,  
		SCCP,  
		SMTP,  
		SNMP,  
		SSH,  
		STP,  
		SYSLOG,  
		TACACS,  
		TCP,  
		TELNET,  
		TFTP,  
		UDP,  
		VTP }.

	DeviceType ::= {
	    ACESSPOINT,  
        ANALOGPHONE,  
        BRIDGE,  
        CABLEMODEM,  
        CLOUD,  
        COAXIALSPLITTER,  
        DSLMODEM,  
        HOMEVOIP,  
        HUB,  
        IPPHONE,  
        LAPTOP,  
        MULTILAYERSWITCH,  
        MULTIUSER,  
        PC,  
        PDA,  
        PRINTER,  
        REMOTENETWORK,  
        REPEATER,  
        ROUTER,  
        SERVER,  
        SWITCH,  
        TABLETPC,  
        TV,  
        WIREDENDDEVICE,  
        WIRELESSENDDEVICE,  
        WIRELESSROUTER
	}.
	ID ::= Integer + String.
	IP ::= new (value:{0..4294967295}).
	PN ::= new (value:{0..65535}).

	Network ::= new(id:ID, net:IP, bcast:IP).


	_tt ::= (TrafficType).	   
	_tt(ARP). _tt(BGP).  _tt(CDP).  _tt(DHCP).  _tt(DNS).  _tt(DTP).  
	_tt(EIGRP).  _tt(FTP).  _tt(H323).  _tt(HTTP).  _tt(HTTPS). _tt(ICMP).  
	_tt(ICMPV6).  _tt(IKE).  _tt(IPV4)._tt(IPV6)._tt(IPSEC).  _tt(LACP).  _tt(NAT).  
	_tt(NTP).  _tt(OSPF).  _tt(PAGP).  _tt(POP3).  _tt(RADIUS).  _tt(RIP_V1).  
	_tt(RIP_V2).  _tt(RTP).  _tt(SCCP).  _tt(SMTP).  _tt(SNMP).  _tt(SSH).  
	_tt(STP).  _tt(SYSLOG).  _tt(TACACS).  _tt(TCP).  _tt(TELNET).  _tt(TFTP).  
	_tt(UDP).  _tt(VTP).
}

/// This domain represents an L3-layer topology model. 
domain NetworkTopology includes NetworkTypes {   
    Device ::= new (id:ID,type:DeviceType).
    Port ::= new (id:ID, dev:Device).
    Link ::= new (id:ID).
    Idge ::= new (from:Port, to:Port).
    EdgeO ::= new (from:Port, to:Link). 
    EdgeI ::= new (from:Link,to:Port).
    Edge ::= EdgeO + EdgeI.

    /// Conformance constraints:
	// for every out edge there is a corresponding in edge:
    conforms count({ e | e is EdgeO, f is EdgeI, e.from = f.to, e.to = f.from}) = count({e | e is EdgeO }).
	// for every in edge there is a corresponding out edge:
	conforms count({ e | e is EdgeI, f is EdgeO, e.from = f.to, e.to = f.from}) = count({e | e is EdgeI }).
	// every device has a complete idge system
    conforms no { d | d is Device, i is Port(_,d), j is Port(_,d), i != j, no Idge(i,j)}.
}

///
domain NetworkFlow includes NetworkTypes {
   /// flow is an aggregation of packets. Flow is defined 
   /// using range constructors for each of its dimensions.
   Flow  ::= new (id:ID).

   SrcNet ::= new (Flow,ID).
   SrcIp ::= new (Flow, IP, IP).
   SrcIp(f,l,r) :- SrcNet(f,x),Network(x,l,r).
   
   DstNet ::= new (Flow,ID).
   DstIp ::= new (Flow, IP, IP).
   DstIp(f,l,r) :- DstNet(f,x),Network(x,l,r).
   
   SrcPn ::= new (Flow, PN, PN).
   DstPn ::= new (Flow, PN, PN). 
   App   ::= new (Flow, TrafficType).
   
	_(x) :- SrcIp(_,x,_); SrcIp(_,_,x).
	_(x) :- DstIp(_,x,_); DstIp(_,_,x).
	_(x) :- SrcPn(_,x,_); SrcPn(_,_,x).	
	_(x) :- DstPn(_,x,_); DstPn(_,_,x).
	
   Flow("*").
   SrcIp(Flow("*"), IP(0),IP(4294967295)).
   DstIp(Flow("*"), IP(0),IP(4294967295)).
   SrcPn(Flow("*"), PN(0),PN(65535)).
   DstPn(Flow("*"), PN(0),PN(65535)).

   App(Flow("*"), ARP). App(Flow("*"),BGP). App(Flow("*"),CDP).  
   App(Flow("*"),DHCP). App(Flow("*"),DNS). App(Flow("*"),DTP).  
   App(Flow("*"),EIGRP). App(Flow("*"),FTP). App(Flow("*"),H323).  
   App(Flow("*"),HTTP). App(Flow("*"),HTTPS). App(Flow("*"),ICMP).  
   App(Flow("*"),ICMPV6). App(Flow("*"),IKE). App(Flow("*"),IPV4).App(Flow("*"),IPV6).
   App(Flow("*"),IPSEC). App(Flow("*"),LACP). App(Flow("*"),NAT).  
   App(Flow("*"),NTP). 	App(Flow("*"),OSPF). App(Flow("*"),PAGP).  
   App(Flow("*"),POP3). App(Flow("*"),RADIUS). App(Flow("*"),RIP_V1).  
   App(Flow("*"),RIP_V2). App(Flow("*"),RTP). App(Flow("*"),SCCP).  
   App(Flow("*"),SMTP). App(Flow("*"),SNMP). App(Flow("*"),SSH).  
   App(Flow("*"),STP). 	App(Flow("*"),SYSLOG). App(Flow("*"),TACACS).  
   App(Flow("*"),TCP). App(Flow("*"),TELNET). App(Flow("*"),TFTP).  
   App(Flow("*"),UDP). 	App(Flow("*"),VTP).

   Range ::= new(Integer,Integer).
   /// This computes a unified range representation for Flow specification.
   flow ::= (f:Flow,srcipRange:Range,dstipRange:Range,srcPnRange:Range,dstPnRange:Range,appRange:Range).
				
   /// Determines whether the specified packet is a part of the given flow.
   packet ::= (f:Flow,srcip:IP,dstip:IP, 
               srcpn:PN,dstpn:PN,app:TrafficType).

   packet (f,srcip,dstip,srcpn,dstpn,app) :-
       f is Flow, 
	   SrcIp(f, IP(l1),IP(r1)), srcip is IP(x1), l1 <= x1, x1 <= r1,    
	   DstIp(f, IP(l2),IP(r2)), dstip is IP(x2), l2 <= x2, x2 <= r2,    
	   SrcPn(f, PN(l3),PN(r3)), srcpn is PN(x3), l3 <= x3, x3 <= r3,     
	   DstPn(f, PN(l4),PN(r4)), dstpn is PN(x4), l4 <= x4, x4 <= r4,    
	   App(f,app). 
             
   packets ::= (f:Flow,p:packet).
   packets(f,p) :- f is Flow, p is packet(f,_,_,_,_,_).
}

domain Reachability includes NetworkTopology, NetworkFlow {
    Filter ::= new (edge:Edge, flow:Flow).
    Transform ::= new (idge:Idge, inflow:Flow, outflow:Flow).
    Path ::= new (Edge+Idge, any Path + {NIL}).
	
	filter ::= (edge:Edge, flw:Flow).
	filter(edge,Flow("*")) :- edge is Edge, no Filter(edge,_).
	filter(edge,flw) :- edge is Edge, Filter(edge, flw).

	transformation ::= (idge:Idge, inflow:Flow, outflow:Flow).
	transformation(idge, Flow("*"), Flow("*")) :- idge is Idge, no Transform(idge,_,_).
	transformation(idge, inflw,outflw) :- idge is Idge, Transform(idge,inflw,outflw).
}

model N1 of Reachability {

	///
	///					 src.ip in 10..20
	///					 dst.ip = 40
	/// Packet("f1") <== src.pn in 0..65535  
	///					 dst.pn in {80,443}
	///					 app in {TCP}
	///
    p is Flow("f1").
    SrcIp(p,IP(10),IP(20)).
    DstIp(p,IP(40),IP(40)).
    SrcPn(p,PN(0),PN(65535)).
	DstPn(p,PN(80),PN(80)).
    DstPn(p,PN(443),PN(443)).
    App(p,TCP).

    d_private_router is Device("private_router", ROUTER).
        p_private_router_FastEthernet0_0 is Port("FastEthernet0/0",d_private_router).
        p_private_router_Serial0_0_0 is Port("Serial0/0/0",d_private_router).
        i1 is Idge(p_private_router_FastEthernet0_0, p_private_router_Serial0_0_0).
        i2 is Idge(p_private_router_Serial0_0_0, p_private_router_FastEthernet0_0).
    d_zfwRouter is Device("zfwRouter", ROUTER).
        p_zfwRouter_Serial0_0_0 is Port("Serial0/0/0",d_zfwRouter).
        p_zfwRouter_Serial0_0_1 is Port("Serial0/0/1",d_zfwRouter).
        i3 is Idge(p_zfwRouter_Serial0_0_0, p_zfwRouter_Serial0_0_1).
        i4 is Idge(p_zfwRouter_Serial0_0_1, p_zfwRouter_Serial0_0_0).
    d_public_router is Device("public_router", ROUTER).
        p_public_router_Serial0_0_1 is Port("Serial0/0/1",d_public_router).
    l0 is Link("private_switch.vlan1").
    l1 is Link("private_router.Serial0/0/0+zfwRouter.Serial0/0/0").
    l2 is Link("public_router.Serial0/0/1+zfwRouter.Serial0/0/1").
    e1 is EdgeO(p_private_router_FastEthernet0_0,l0).
    e2 is EdgeO(p_private_router_Serial0_0_0,l1).
    e3 is EdgeI(l1,p_zfwRouter_Serial0_0_0).
    e4 is EdgeO(p_zfwRouter_Serial0_0_0,l1).
    e5 is EdgeI(l1,p_private_router_Serial0_0_0).
    e6 is EdgeO(p_zfwRouter_Serial0_0_1,l2).
    e7 is EdgeI(l2,p_public_router_Serial0_0_1).
    e8 is EdgeO(p_public_router_Serial0_0_1,l2).
    e9 is EdgeI(l2,p_zfwRouter_Serial0_0_1).
    e10 is EdgeI(l0,p_private_router_FastEthernet0_0).
}

///	query M1 filter(EdgeO(%p_private_router_FastEthernet0_0,%l0),p)
/// query M1 filter(EdgeO(%p_private_router_FastEthernet0_0,%l0),packet(_,IP(0),IP(0),PN(0),PN(0),_))
///
/// This takes a lot of time (~17s):
///	query M1 no Filter(EdgeO(%p_private_router_FastEthernet0_0,%l0),_)
///
/// This is also not so fast (~6s):
///	query M1 NoFilter(EdgeO(%p_private_router_FastEthernet0_0,%l0))
///
///	Majority of time is spend for (~6s):
/// query M1 EdgeO(%p_private_router_FastEthernet0_0,%l0)

domain NetworkQuery includes  NetworkTopology, NetworkFlow {
	Query ::= new (id:ID).

	/// Path Constraints:	
	Path ::= new (id:ID).
	Avoid ::= new (path:Path, place:Device+Port+Link).
	Waypoint ::= new (path:Path, place:Device+Port+Link).
	SomePath ::= new (query:Query, path:Path).
	AllPaths ::= new (query:Query, path:Path).
		
	/// Flow Constraints
	Assume::= new (query:Query, flow:Flow).
	Ensure::= new (query:Query, flow:Flow).
}

model Q1 of NetworkQuery {
	q is Query("web-traffic must go through web-proxy").
	p is Path(1).
	Waypoint(p, Device("web-proxy",SERVER)).
	Network("local",IP(11),IP(21)).
	Network("internet",IP(0),IP(10)).
	Network("internet",IP(11),IP(100)).
	f is Flow("web-traffic").
	     SrcNet(f,"local").
		 DstNet(f,"internet").
		 DstPn(f,PN(80),PN(80)).
		 DstPn(f,PN(443),PN(443)).
		 App(f,HTTP). App(f,HTTPS).

	Assume(q, f).
	Ensure(q, f).
}
