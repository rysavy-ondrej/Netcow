domain Intervals {
	N       ::= {0..4294967295}.
	A       ::= fun (adr:String -> val:N).
	/// This is interval.
	I       ::= (left:String,right:String).
	I(l,r)  :-  A(l,x),A(r,y), x <= y. 
	/// Represents a set of intervals.	
    Set 	::= new (id:String+Integer).
	/// Mem (s,x) tests whether x belongs to the set s.
	Add 	::= new (s:Set,left:String,right:String).
	/// Set union.
	Union	::= new (x:any set,y:any set).
	/// Set intersection.
	Inter	::= new (x:any set,y:any set).
	/// set is either declared set or created using set operations
	set 	::= Set + Union + Inter.
	
	isEmpty ::= (s:set).
	isEmpty(s) :- s is Set, no { x | x is Add(s,_,_)}.	

	mem			::= (s:set, left:String,right:String).
	mem(s,l,r) 	:- s is Set, Add(s,l,r).
	mem(s,l,r)	:- s is Union(x,y), mem(x,l,r).
	mem(s,l,r)	:- s is Union(x,y), mem(y,l,r).
	mem(s,l,r)	:- s is Inter(x,y), mem(x,l,r), mem(y,l,r).
}


model I1 of Intervals {
	A("0.0.0.0", 0).
	A("255.255.255.255", 4294967295).
	A("10.10.10.0",168430080).
	A("10.10.10.255",168430335).
	A("192.168.10.0",3232238080).
	A("192.168.10.255", 3232238335).
	
	A("192.168.20.0",3232240640).
	A("192.168.20.255", 3232240895).
	
	A("192.168.30.0",3232243200).
	A("192.168.30.255", 3232243455).
		
	s1 is Set(1).
	      Add(s1,"10.10.10.0","10.10.10.255").
		  Add(s1,"192.168.10.0","192.168.10.255").
	s2 is Set(2).
          Add(s2,"10.10.10.0","10.10.10.255").
          Add(s2,"192.168.20.0","192.168.20.255").
	s3 is Union(s1,s2).
	s4 is Inter(s1,s2).
	s5 is Union(s1,s4).
	
    /// QUERIES:
	/// query I1 I("10.10.10.0", "192.168.20.255")
	/// query I1 mem(%s1, "192.168.20.0", "192.168.20.255")	  ~ FALSE
	/// query I1 mem(%s3, "10.10.10.0", "10.10.10.255")		  ~ TRUE
	/// query I1 mem(%s4, "10.10.10.0", "10.10.10.255")	      ~ TRUE
	/// query I1 mem(%s4, "192.168.20.0", "192.168.20.255")	  ~ FALSE
	/// query I1 mem(%s5, "192.168.10.0","192.168.10.255")    ~ TRUE
	/// query I1 mem(Union(%s5,Inter(%s1,%s2)), "192.168.10.0","192.168.10.255")    ~ FALSE because of closed world assumption!!!
}