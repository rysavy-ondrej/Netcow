//// This domain specifies properties of flow-based abstraction of Internet topology and communication.
//// In this domain, entities are L3 and L2 devices connected by links and communication flows.
domain Inet {
	UInt8 ::= {0..255}.
	UInt16 ::= {0..65535}.
	UInt32 ::=  {0..4294967295}.


    //// Enumerates all supported internetwork and transport. 
    Protocol ::= new (name: String). //// valid names are "ip", "ip.icmp", "ip.udp", "ip.tcp"
    //// Test if protocol p can carry protocol q. 
	//// This is used for testing if "ip" matches "ip.udp" 
	carries ::= (p:Protocol,q:Protocol).
	carries(p,q) :- p is Protocol, q is Protocol, isSubstring(p.name,q.name) = TRUE.

	//// IPAddress is represented as UInt32. Note that only used ip addressed are provable in the model.
    IpAddress ::= new (value:UInt32).
    IpAddressRange ::= new (lo:UInt32, hi:UInt32).
	//// IP Network is a range of addresses. Field label consists of 
    //// a string representing address in dot notation.
	IpNetwork ::= new (label:String, range:IpAddressRange).
	//// Port is 16-bit wide unsigned number for TCP and UDP transport.
    Port ::= new (value:UInt16).
	PortRange ::= new (lo:UInt16, hi:UInt16).
	//// Type of service is a byte which defines a class of the traffic.
	TypeOfService ::= new (value:UInt8).
    			   
    //// Defines direction of flow that traverses the interface.
	FlowDirection ::= {IN,OUT}.
	Status ::= {UP,DOWN}.
	//// This type represents an ip address assigned to the interface.
	InterfaceAddress ::= new (label:String,address:IpAddress,network:IpNetwork).

	
    RouterPort ::= new (router:Router,id:String,status:Status,address:InterfaceAddress+{NIL}).
    //// Represents L3 forwarding (router) devices.
    Router ::= new (name : String).
	
	TrunkEncapsulation ::= {DOT1Q, ISL}.
	SwitchPortTrunk ::= new (encapsulation:TrunkEncapsulation,native:Integer).
	SwitchPortAccess ::= new (vlan:Integer). 
	SwitchPort ::= new (switch:Switch,id:String,status:Status,mode:SwitchPortTrunk+SwitchPortAccess).
	//// Represents L2 forwarding (switch) devices.
    Switch ::= new (name : String).


    FrameRelaySwitch ::= new (name:String).
    FrameRelayPort ::= new (switch:FrameRelaySwitch,id:String,status:Status).
    FrameRelayLink ::= new (srcPort:FrameRelayPort, srcDlci:Integer, trgPort:FrameRelayPort, trgDlci:Integer).


	Interface ::= RouterPort + SwitchPort + FrameRelayPort.
	//// Link is a directed connection between ports. Link can have additional 
	//// parameters that defines its QoS capabilities. 
    Link ::= new (source:Interface, target:Interface).

////=========ACL===========================================================================
	//// Specifies an action of ACL.
    AclAction ::= { PERMIT, DENY }.
	
	//// Specifies rules of an access list.
	AccessList::= new (name:String, 
	         action:AclAction, 
			 pt:Protocol, 
			 srcIp:IpAddressRange, 
			 dstIp:IpAddressRange, 
			 srcPn:PortRange, 
			 dstPn:PortRange).
			 
	//// Binds an access list to an interface.  		 
	AccessGroup ::= new (device:Router, 
	                     aclname:String,
						 direction:FlowDirection,
						 interface:RouterPort).

////=========STATIC ROUTES==================================================================
	
	IpRoute ::= new (device:Router, network: IpNetwork, iface:RouterPort, IpAddress+{NIL}).
	                 
	
////=========FLOWS ========================================================================= 
	//// Flow specification consists of key 6-tuple. Flows are derived from available 
	//// addresses and port.
    Flow ::=     (pt     : Protocol,
                  srcIp  :  IpAddress,
                  dstIp  :  IpAddress,
                  srcPn  :  Port,
			      dstPn  :  Port,
			      tos    :  TypeOfService ).
////	Flow(pt,srcIp,dstIp,srcPn,dstPn,tos) :- 
////		pt is Protocol, 
////		srcIp >= 0, srcIp <= 4294967295, srcIp is IpAddress,
////		dstIp >= 0, dstIp <= 4294967295, 
////		srcPn >= 0, srcPn <= 65535, 
////		dstPn >= 0, dstPn <= 65535,
////		tos   >= 0, tos <= 255. 
////=========RULES ========================================================================= 
	forward ::= (device:Router, source:RouterPort, target:RouterPort, inflow:Flow, outflow:Flow).
	forward (device, source, target, flow, flow) :- forwardRouting(device,source,target,flow).

	forwardRouting ::= (device:Router, source:RouterPort, target:RouterPort, flow:Flow).
	forwardRouting(device,source,target,flow) :-
		flow is Flow,
		device is Router,
		network is IpNetwork, 
		target is RouterPort,
		source is RouterPort, source.router=device,
		IpRoute(device, network, target, _).
		////flow.dstIp >= network.range.lo, flow.dstIp <= network.range.hi.
		
	filter ::= (device:Router, interface:RouterPort, direction:FlowDirection, flow:Flow).
    filterAcl ::= (device:Router, interface:RouterPort, direction:FlowDirection, flow:Flow).
	filterAcl (device, interface, direction,flow) :- 
		flow is Flow,
		AccessGroup(device, aclId, direction, interface),
		AccessList(aclId,action, pt, srcIpRange, dstIpRange, srcPnRange, dstPnRange),
		carries(pt,flow.pt), flow.srcIp = srcIpRange.lo, flow.srcIp = srcIpRange.hi.
	///	flow.dstIp >= dstIpRange.lo, flow.dstIp <= dstIpRange.hi,
	///	flow.srcPn >= srcPnRange.lo, flow.srcPn <= srcPnRange.hi.
	//// If no access group is defined then all IN flows are permitted on an interface.
	filterAcl (device, interface, IN, flow) :- 
	    no AccessGroup(device, _, IN, interface),  
		flow is Flow, device is Router, interface is RouterPort.
	//// If no access group is defined then all OUT flows are permitted on an interface. 	
	filterAcl (device, interface, OUT, flow) :- 
	    no AccessGroup(device, _, OUT, interface),  
		flow is Flow, device is Router, interface is RouterPort.
		
    filter (device, interface, direction,flow) :- filterAcl (device, interface, direction,flow).

	//// Determines if inflow from source port can reach target port as outflow. 
    flowReach ::= (source:Interface, target:Interface, inflow:Flow, outflow:Flow).
		
    flowReach(source,target,inflow,outflow) :-
         filter(dev,source,IN,inflow),
         filter(dev,target,OUT,outflow),
         forward(dev,source,target,inflow,outflow).
    
	//// Flow is not modified on link. 
	flowReach(source,target,flow,flow) :-
	     flow is Flow, 
         Link(source,target).

    //// This type defines list of interface that can be used as a path in 
	//// the network.
	InterfaceList ::= new (Interface, any InterfaceList + {NIL}).
	
	//// Determines relation between input flow and output flow for
	//// the given path.
	flowReachPath ::= (path:InterfaceList, inflow:Flow, outflow:Flow).
	
    flowReachPath(InterfaceList(source,InterfaceList(target,NIL)),inflow,outflow) :-
        flowReach(source,target,inflow,outflow).
    
	flowReachPath(InterfaceList(source, InterfaceList(mid,tail)),inflow,outflow) :-
        flowReachPath(InterfaceList(mid,tail),medflow,outflow),
        flowReach(source,mid,inflow,medflow).

//// CONFORMANCE TESTS================================================================
	//// Checks if there is an unidirectional link, which is usually a network topology error.		
	unidirectional :-
		x is Interface, y is Interface, Link(x,y), no Link(y,x).
	
	
	conforms no unidirectional.
}