// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  dhcpz164.fit.vutbr.cz
// DateTime: 12/10/2014 8:46:03 AM
// UserName: rysavy
// Input file <API/Parser/parser.y - 10/28/2014 5:30:00 AM>

// options: babel conflicts lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Microsoft.Formula.API
{
internal enum Tokens {error=2,EOF=3,DOMAIN=4,MODEL=5,TRANSFORM=6,
    SYSTEM=7,MACHINE=8,PARTIAL=9,ENSURES=10,REQUIRES=11,CONFORMS=12,
    LCBRACE=13,RCBRACE=14,LPAREN=15,RPAREN=16,LSBRACE=17,RSBRACE=18,
    INCLUDES=19,EXTENDS=20,OF=21,RETURNS=22,AT=23,COLON=24,
    RENAMES=25,RANGE=26,SOME=27,ATLEAST=28,ATMOST=29,INITIALLY=30,
    NEXT=31,PROPERTY=32,BOOT=33,EQ=34,TYPEDEF=35,RULE=36,
    PIPE=37,DOT=38,SEMICOLON=39,COMMA=40,NO=41,IS=42,
    WEAKARROW=43,STRONGARROW=44,NEW=45,INJ=46,BIJ=47,SUR=48,
    FUN=49,ANY=50,SUB=51,BAREID=52,QUALID=53,DIGITS=54,
    REAL=55,FRAC=56,STRSNGSTART=57,STRSNG=58,STRSNGESC=59,STRSNGEND=60,
    STRMULSTART=61,STRMUL=62,STRMULESC=63,STRMULEND=64,NE=65,LT=66,
    GT=67,GE=68,LE=69,PLUS=70,MINUS=71,MOD=72,
    DIV=73,MUL=74,UMINUS=75,QSTART=76,QEND=77,UQSTART=78,
    UQEND=79,QUOTERUN=80,QUOTEESCAPE=81,RUNAWAYSTRING=82,ALIENCHAR=83,maxParseToken=84,
    LEX_WHITE=85,LEX_COMMENT=86,LEX_ERROR=87};

internal partial struct LexValue
#line 7 "API/Parser/parser.y"
       {
	public string str;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<LexValue,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }

  protected abstract int CurrentSc { get; set; }
  //
  // Override the virtual EolState property if the scanner state is more
  // complicated then a simple copy of the current start state ordinal
  //
  public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

// Interface class for 'colorizing' scanners
public interface IColorScan {
  void SetSource(string source, int offset);
  int GetNext(ref int state, out int start, out int end);
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public LexValue yylval;
  public LexLocation yylloc;
  public ScanObj( int t, LexValue val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[265];
  private static State[] states = new State[425];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "Config", "ModuleList", "Module", "Anon@1", "Domain", 
      "Model", "Transform", "TSystem", "Machine", "MachineSigConfig", "Anon@2", 
      "MachineBody", "MachineSentenceConf", "MachineSentence", "SentenceConfig", 
      "MachineProp", "Anon@3", "Step", "Anon@4", "Update", "Anon@5", "FuncTerm", 
      "MachineSig", "Anon@6", "Anon@7", "MachineSigIn", "Anon@8", "ModRefs", 
      "VoMParamList", "ModelSigConfig", "ModelBody", "ModelSentence", "ModelFactList", 
      "ModelContractConf", "ModelContract", "Anon@9", "BodyList", "Anon@10", 
      "CardSpec", "Id", "Anon@11", "ModelFact", "Anon@12", "ModelSig", "Anon@13", 
      "ModelIntro", "Anon@14", "Anon@15", "Anon@16", "ModRef", "Anon@17", "Anon@18", 
      "TSystemRest", "TransformSigConfig", "Anon@19", "TransSteps", "TransStepConfig", 
      "Anon@20", "TransformRest", "TransBody", "TransSentenceConfig", "TransSentence", 
      "Rule", "TypeDecl", "Anon@21", "Anon@22", "TransformSig", "Anon@23", "TransSigIn", 
      "Anon@24", "ModelParamList", "DomainSigConfig", "DomSentences", "DomSentenceConfig", 
      "DomSentence", "Anon@25", "DomainSig", "Anon@26", "Anon@27", "Anon@28", 
      "SettingList", "Anon@29", "Setting", "Constant", "ModRefRename", "ValOrModelParam", 
      "UnnBody", "StepOrUpdateLHS", "ChoiceList", "ModApply", "Anon@30", "ModArgList", 
      "ModAppArg", "Anon@31", "String", "Anon@32", "ModRefNoRename", "Anon@33", 
      "TypeDeclBody", "Anon@34", "Fields", "Anon@35", "Anon@36", "FunDecl", "MapArrow", 
      "Field", "UnnCmp", "TypeId", "Anon@37", "EnumList", "EnumCnst", "FuncTermList", 
      "Anon@38", "Anon@39", "Compr", "Anon@40", "ComprRest", "Anon@41", "Body", 
      "Anon@42", "Constraint", "RelOp", "FuncOrCompr", "Anon@43", "Atom", "UnOp", 
      "BinOp", "Anon@44", "Anon@45", "QuoteList", "QuoteItem", "StrStart", "StrBodyList", 
      "StrEnd", "StrBody", };

  static Parser() {
    states[0] = new State(new int[]{3,3,17,202,4,205,5,278,9,283,6,290,8,413},new int[]{-1,1,-3,4,-4,424,-5,6,-7,9,-74,10,-79,199,-8,225,-32,226,-46,268,-48,271,-9,289,-10,374,-11,375,-12,376,-25,410});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{4,205,5,278,9,283,6,290,8,413,3,-3},new int[]{-4,5,-5,6,-7,9,-74,10,-79,199,-8,225,-32,226,-46,268,-48,271,-9,289,-10,374,-11,375,-12,376,-25,410});
    states[5] = new State(-5);
    states[6] = new State(new int[]{3,-6,4,-7,5,-7,9,-7,6,-7,8,-7},new int[]{-6,7});
    states[7] = new State(new int[]{4,205,5,278,9,283,6,290,8,413},new int[]{-4,8,-5,6,-7,9,-74,10,-79,199,-8,225,-32,226,-46,268,-48,271,-9,289,-10,374,-11,375,-12,376,-25,410});
    states[8] = new State(-8);
    states[9] = new State(-9);
    states[10] = new State(new int[]{13,11});
    states[11] = new State(new int[]{14,12,52,118,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,13,91,12,183,17,189},new int[]{-75,13,-76,15,-77,17,-65,18,-114,19,-125,47,-24,51,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-117,90,-66,182,-17,187});
    states[12] = new State(-103);
    states[13] = new State(new int[]{14,14});
    states[14] = new State(-104);
    states[15] = new State(new int[]{52,118,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,13,91,12,183,17,189,14,-105},new int[]{-75,16,-76,15,-77,17,-65,18,-114,19,-125,47,-24,51,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-117,90,-66,182,-17,187});
    states[16] = new State(-106);
    states[17] = new State(-107);
    states[18] = new State(-109);
    states[19] = new State(new int[]{36,22,38,-194},new int[]{-115,20});
    states[20] = new State(new int[]{38,21});
    states[21] = new State(-195);
    states[22] = new State(-196,new int[]{-116,23});
    states[23] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,41,103},new int[]{-39,24,-121,26,-123,30,-24,33,-127,41,-42,100,-86,54,-97,58,-134,59,-128,73});
    states[24] = new State(new int[]{38,25});
    states[25] = new State(-197);
    states[26] = new State(new int[]{38,-203,14,-203,39,-204},new int[]{-122,27});
    states[27] = new State(new int[]{39,28});
    states[28] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,41,103},new int[]{-39,29,-121,26,-123,30,-24,33,-127,41,-42,100,-86,54,-97,58,-134,59,-128,73});
    states[29] = new State(-205);
    states[30] = new State(new int[]{40,31,39,-206,38,-206,14,-206});
    states[31] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,41,103},new int[]{-121,32,-123,30,-24,33,-127,41,-42,100,-86,54,-97,58,-134,59,-128,73});
    states[32] = new State(-207);
    states[33] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,34,111,65,112,66,113,69,114,67,115,68,116,24,117,40,-208,39,-208,38,-208,14,-208},new int[]{-129,34,-124,109});
    states[34] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-24,35,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[35] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,40,-221,36,-221,38,-221,34,-221,65,-221,66,-221,69,-221,67,-221,68,-221,24,-221,39,-221,14,-221,16,-221,37,-221,79,-221},new int[]{-129,34});
    states[36] = new State(-241);
    states[37] = new State(-242);
    states[38] = new State(-243);
    states[39] = new State(-244);
    states[40] = new State(-245);
    states[41] = new State(-219);
    states[42] = new State(new int[]{15,43,74,-232,73,-232,72,-232,70,-232,71,-232,40,-232,36,-232,38,-232,34,-232,65,-232,66,-232,69,-232,67,-232,68,-232,24,-232,39,-232,14,-232,16,-232,37,-232,79,-232});
    states[43] = new State(-222,new int[]{-130,44});
    states[44] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,13,91},new int[]{-114,45,-125,47,-24,51,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-117,90});
    states[45] = new State(new int[]{16,46});
    states[46] = new State(-223);
    states[47] = new State(new int[]{36,-214,38,-214,16,-214,14,-214,37,-214,40,-215},new int[]{-126,48});
    states[48] = new State(new int[]{40,49});
    states[49] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,13,91},new int[]{-114,50,-125,47,-24,51,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-117,90});
    states[50] = new State(-216);
    states[51] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,40,-217,36,-217,38,-217,16,-217,14,-217,37,-217},new int[]{-129,34});
    states[52] = new State(-234);
    states[53] = new State(-235);
    states[54] = new State(-233);
    states[55] = new State(-236);
    states[56] = new State(-237);
    states[57] = new State(-238);
    states[58] = new State(-239);
    states[59] = new State(new int[]{58,67,59,68,62,69,63,70,60,62,64,63},new int[]{-135,60,-136,64,-137,65});
    states[60] = new State(new int[]{60,62,64,63},new int[]{-136,61});
    states[61] = new State(-253);
    states[62] = new State(-263);
    states[63] = new State(-264);
    states[64] = new State(-254);
    states[65] = new State(new int[]{58,67,59,68,62,69,63,70,60,-257,64,-257},new int[]{-135,66,-137,65});
    states[66] = new State(-258);
    states[67] = new State(-259);
    states[68] = new State(-260);
    states[69] = new State(-261);
    states[70] = new State(-262);
    states[71] = new State(-255);
    states[72] = new State(-256);
    states[73] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-24,74,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[74] = new State(-220,new int[]{-129,34});
    states[75] = new State(-240);
    states[76] = new State(-224,new int[]{-131,77});
    states[77] = new State(new int[]{80,82,81,83,78,84},new int[]{-132,78,-133,80});
    states[78] = new State(new int[]{77,79});
    states[79] = new State(-225);
    states[80] = new State(new int[]{80,82,81,83,78,84,77,-227},new int[]{-132,81,-133,80});
    states[81] = new State(-228);
    states[82] = new State(-229);
    states[83] = new State(-230);
    states[84] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-24,85,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[85] = new State(new int[]{79,86,74,36,73,37,72,38,70,39,71,40},new int[]{-129,34});
    states[86] = new State(-231);
    states[87] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-24,88,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[88] = new State(new int[]{16,89,74,36,73,37,72,38,70,39,71,40},new int[]{-129,34});
    states[89] = new State(-226);
    states[90] = new State(-218);
    states[91] = new State(-198,new int[]{-118,92});
    states[92] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,13,91},new int[]{-114,93,-125,47,-24,51,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-117,90});
    states[93] = new State(new int[]{14,95,37,96},new int[]{-119,94});
    states[94] = new State(-199);
    states[95] = new State(-200);
    states[96] = new State(-201,new int[]{-120,97});
    states[97] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,41,103},new int[]{-39,98,-121,26,-123,30,-24,33,-127,41,-42,100,-86,54,-97,58,-134,59,-128,73});
    states[98] = new State(new int[]{14,99});
    states[99] = new State(-202);
    states[100] = new State(new int[]{15,43,42,101,74,-232,73,-232,72,-232,70,-232,71,-232,34,-232,65,-232,66,-232,69,-232,67,-232,68,-232,24,-232,40,-232,39,-232,38,-232,14,-232});
    states[101] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-24,102,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[102] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,40,-209,39,-209,38,-209,14,-209},new int[]{-129,34});
    states[103] = new State(new int[]{13,91,52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-117,104,-24,105,-42,106,-127,41,-86,54,-97,58,-134,59,-128,73});
    states[104] = new State(-210);
    states[105] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,40,-211,39,-211,38,-211,14,-211},new int[]{-129,34});
    states[106] = new State(new int[]{42,107,15,43,74,-232,73,-232,72,-232,70,-232,71,-232,40,-232,39,-232,38,-232,14,-232});
    states[107] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-24,108,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[108] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,40,-212,39,-212,38,-212,14,-212},new int[]{-129,34});
    states[109] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-24,110,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[110] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,40,-213,39,-213,38,-213,14,-213},new int[]{-129,34});
    states[111] = new State(-246);
    states[112] = new State(-247);
    states[113] = new State(-248);
    states[114] = new State(-249);
    states[115] = new State(-250);
    states[116] = new State(-251);
    states[117] = new State(-252);
    states[118] = new State(new int[]{15,-234,74,-234,73,-234,72,-234,70,-234,71,-234,40,-234,36,-234,38,-234,35,-156},new int[]{-100,119});
    states[119] = new State(new int[]{35,120});
    states[120] = new State(new int[]{52,128,53,129,13,130,15,145,51,160,45,165,46,178,47,179,48,180,49,181},new int[]{-101,121,-89,123,-109,124,-110,127,-106,170});
    states[121] = new State(new int[]{38,122});
    states[122] = new State(-157);
    states[123] = new State(-158);
    states[124] = new State(new int[]{70,125,38,-178,40,-178,16,-178,43,-178,44,-178});
    states[125] = new State(new int[]{52,128,53,129,13,130},new int[]{-89,126,-109,124,-110,127});
    states[126] = new State(-179);
    states[127] = new State(-180);
    states[128] = new State(-183);
    states[129] = new State(-184);
    states[130] = new State(-181,new int[]{-111,131});
    states[131] = new State(new int[]{54,137,55,140,56,141,57,71,61,72,52,143,53,144},new int[]{-112,132,-113,134,-97,142,-134,59});
    states[132] = new State(new int[]{14,133});
    states[133] = new State(-182);
    states[134] = new State(new int[]{40,135,14,-185});
    states[135] = new State(new int[]{54,137,55,140,56,141,57,71,61,72,52,143,53,144},new int[]{-112,136,-113,134,-97,142,-134,59});
    states[136] = new State(-186);
    states[137] = new State(new int[]{26,138,40,-187,14,-187});
    states[138] = new State(new int[]{54,139});
    states[139] = new State(-193);
    states[140] = new State(-188);
    states[141] = new State(-189);
    states[142] = new State(-190);
    states[143] = new State(-191);
    states[144] = new State(-192);
    states[145] = new State(-159,new int[]{-102,146});
    states[146] = new State(new int[]{52,153,53,129,13,130,50,158},new int[]{-103,147,-108,149,-89,152,-109,124,-110,127});
    states[147] = new State(new int[]{16,148});
    states[148] = new State(-160);
    states[149] = new State(new int[]{40,150,16,-170,43,-170,44,-170});
    states[150] = new State(new int[]{52,153,53,129,13,130,50,158},new int[]{-103,151,-108,149,-89,152,-109,124,-110,127});
    states[151] = new State(-171);
    states[152] = new State(-172);
    states[153] = new State(new int[]{24,154,70,-183,40,-183,16,-183,43,-183,44,-183});
    states[154] = new State(new int[]{50,156,52,128,53,129,13,130},new int[]{-89,155,-109,124,-110,127});
    states[155] = new State(-174);
    states[156] = new State(new int[]{52,128,53,129,13,130},new int[]{-89,157,-109,124,-110,127});
    states[157] = new State(-175);
    states[158] = new State(new int[]{52,128,53,129,13,130},new int[]{-89,159,-109,124,-110,127});
    states[159] = new State(-173);
    states[160] = new State(-161,new int[]{-104,161});
    states[161] = new State(new int[]{15,162});
    states[162] = new State(new int[]{52,153,53,129,13,130,50,158},new int[]{-103,163,-108,149,-89,152,-109,124,-110,127});
    states[163] = new State(new int[]{16,164});
    states[164] = new State(-162);
    states[165] = new State(-163,new int[]{-105,166});
    states[166] = new State(new int[]{15,167});
    states[167] = new State(new int[]{52,153,53,129,13,130,50,158},new int[]{-103,168,-108,149,-89,152,-109,124,-110,127});
    states[168] = new State(new int[]{16,169});
    states[169] = new State(-164);
    states[170] = new State(new int[]{15,171});
    states[171] = new State(new int[]{52,153,53,129,13,130,50,158},new int[]{-103,172,-108,149,-89,152,-109,124,-110,127});
    states[172] = new State(new int[]{43,176,44,177},new int[]{-107,173});
    states[173] = new State(new int[]{52,153,53,129,13,130,50,158},new int[]{-103,174,-108,149,-89,152,-109,124,-110,127});
    states[174] = new State(new int[]{16,175});
    states[175] = new State(-165);
    states[176] = new State(-176);
    states[177] = new State(-177);
    states[178] = new State(-166);
    states[179] = new State(-167);
    states[180] = new State(-168);
    states[181] = new State(-169);
    states[182] = new State(-110);
    states[183] = new State(-111,new int[]{-78,184});
    states[184] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,41,103},new int[]{-39,185,-121,26,-123,30,-24,33,-127,41,-42,100,-86,54,-97,58,-134,59,-128,73});
    states[185] = new State(new int[]{38,186});
    states[186] = new State(-112);
    states[187] = new State(new int[]{52,118,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,13,91,12,183},new int[]{-77,188,-65,18,-114,19,-125,47,-24,51,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-117,90,-66,182});
    states[188] = new State(-108);
    states[189] = new State(-122,new int[]{-84,190});
    states[190] = new State(new int[]{52,52,53,53},new int[]{-83,191,-85,193,-42,196});
    states[191] = new State(new int[]{18,192});
    states[192] = new State(-123);
    states[193] = new State(new int[]{40,194,18,-124});
    states[194] = new State(new int[]{52,52,53,53},new int[]{-83,195,-85,193,-42,196});
    states[195] = new State(-125);
    states[196] = new State(new int[]{34,197});
    states[197] = new State(new int[]{54,55,55,56,56,57,57,71,61,72},new int[]{-86,198,-97,58,-134,59});
    states[198] = new State(-126);
    states[199] = new State(new int[]{13,-113,17,-114},new int[]{-80,200});
    states[200] = new State(new int[]{17,202},new int[]{-3,201});
    states[201] = new State(-115);
    states[202] = new State(new int[]{52,52,53,53},new int[]{-83,203,-85,193,-42,196});
    states[203] = new State(new int[]{18,204});
    states[204] = new State(-121);
    states[205] = new State(new int[]{52,206});
    states[206] = new State(new int[]{20,207,19,222,17,-116,13,-116});
    states[207] = new State(-117,new int[]{-81,208});
    states[208] = new State(new int[]{52,214},new int[]{-30,209,-52,210,-87,213,-99,221});
    states[209] = new State(-118);
    states[210] = new State(new int[]{40,211,17,-148,13,-148});
    states[211] = new State(new int[]{52,214},new int[]{-30,212,-52,210,-87,213,-99,221});
    states[212] = new State(-149);
    states[213] = new State(-150);
    states[214] = new State(new int[]{25,215,23,219,40,-154,17,-154,13,-154,19,-154,20,-154,15,-154});
    states[215] = new State(new int[]{52,216});
    states[216] = new State(new int[]{23,217,40,-152,17,-152,13,-152,19,-152,20,-152,16,-152,15,-152});
    states[217] = new State(new int[]{57,71,61,72},new int[]{-97,218,-134,59});
    states[218] = new State(-153);
    states[219] = new State(new int[]{57,71,61,72},new int[]{-97,220,-134,59});
    states[220] = new State(-155);
    states[221] = new State(-151);
    states[222] = new State(-119,new int[]{-82,223});
    states[223] = new State(new int[]{52,214},new int[]{-30,224,-52,210,-87,213,-99,221});
    states[224] = new State(-120);
    states[225] = new State(-10);
    states[226] = new State(new int[]{13,227});
    states[227] = new State(new int[]{14,228,52,239,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,17,189,10,250,11,254},new int[]{-33,229,-34,231,-35,233,-44,234,-24,238,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-17,248,-36,266,-37,267});
    states[228] = new State(-37);
    states[229] = new State(new int[]{14,230});
    states[230] = new State(-38);
    states[231] = new State(new int[]{52,239,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,17,189,10,250,11,254,14,-39},new int[]{-33,232,-34,231,-35,233,-44,234,-24,238,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-17,248,-36,266,-37,267});
    states[232] = new State(-40);
    states[233] = new State(-41);
    states[234] = new State(new int[]{38,235,40,236});
    states[235] = new State(-51);
    states[236] = new State(new int[]{52,239,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,17,189},new int[]{-35,237,-44,234,-24,238,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-17,243});
    states[237] = new State(-53);
    states[238] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,38,-55,40,-55},new int[]{-129,34});
    states[239] = new State(new int[]{42,240,15,-234,74,-234,73,-234,72,-234,70,-234,71,-234,38,-234,40,-234});
    states[240] = new State(-56,new int[]{-45,241});
    states[241] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-24,242,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[242] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,38,-57,40,-57},new int[]{-129,34});
    states[243] = new State(new int[]{52,239,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-44,244,-24,238,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[244] = new State(new int[]{38,245,40,246});
    states[245] = new State(-52);
    states[246] = new State(new int[]{52,239,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,17,189},new int[]{-35,247,-44,234,-24,238,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-17,243});
    states[247] = new State(-54);
    states[248] = new State(new int[]{52,239,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,10,250,11,254},new int[]{-44,244,-37,249,-24,238,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[249] = new State(-44);
    states[250] = new State(-45,new int[]{-38,251});
    states[251] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,41,103},new int[]{-39,252,-121,26,-123,30,-24,33,-127,41,-42,100,-86,54,-97,58,-134,59,-128,73});
    states[252] = new State(new int[]{38,253});
    states[253] = new State(-46);
    states[254] = new State(new int[]{27,263,29,264,28,265,52,-47,53,-47,54,-47,55,-47,56,-47,57,-47,61,-47,71,-47,76,-47,15,-47,41,-47},new int[]{-40,255,-41,258});
    states[255] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,41,103},new int[]{-39,256,-121,26,-123,30,-24,33,-127,41,-42,100,-86,54,-97,58,-134,59,-128,73});
    states[256] = new State(new int[]{38,257});
    states[257] = new State(-48);
    states[258] = new State(new int[]{54,259});
    states[259] = new State(new int[]{52,52,53,53},new int[]{-42,260});
    states[260] = new State(-49,new int[]{-43,261});
    states[261] = new State(new int[]{38,262});
    states[262] = new State(-50);
    states[263] = new State(-58);
    states[264] = new State(-59);
    states[265] = new State(-60);
    states[266] = new State(-42);
    states[267] = new State(-43);
    states[268] = new State(new int[]{13,-61,17,-62},new int[]{-47,269});
    states[269] = new State(new int[]{17,202},new int[]{-3,270});
    states[270] = new State(-63);
    states[271] = new State(new int[]{19,272,20,275,17,-64,13,-64});
    states[272] = new State(-65,new int[]{-49,273});
    states[273] = new State(new int[]{52,214},new int[]{-30,274,-52,210,-87,213,-99,221});
    states[274] = new State(-66);
    states[275] = new State(-67,new int[]{-50,276});
    states[276] = new State(new int[]{52,214},new int[]{-30,277,-52,210,-87,213,-99,221});
    states[277] = new State(-68);
    states[278] = new State(new int[]{52,279});
    states[279] = new State(-69,new int[]{-51,280});
    states[280] = new State(new int[]{21,281});
    states[281] = new State(new int[]{52,214},new int[]{-52,282,-87,213,-99,221});
    states[282] = new State(-70);
    states[283] = new State(new int[]{5,284});
    states[284] = new State(new int[]{52,285});
    states[285] = new State(-71,new int[]{-53,286});
    states[286] = new State(new int[]{21,287});
    states[287] = new State(new int[]{52,214},new int[]{-52,288,-87,213,-99,221});
    states[288] = new State(-72);
    states[289] = new State(-11);
    states[290] = new State(new int[]{52,291,7,338});
    states[291] = new State(-82,new int[]{-60,292});
    states[292] = new State(new int[]{15,327},new int[]{-61,293,-56,294,-69,314,-71,317});
    states[293] = new State(-83);
    states[294] = new State(new int[]{13,295});
    states[295] = new State(new int[]{14,296,52,118,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,13,91,10,304,11,308,17,189},new int[]{-62,297,-63,299,-64,301,-65,302,-114,19,-125,47,-24,51,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-117,90,-66,303,-17,312});
    states[296] = new State(-84);
    states[297] = new State(new int[]{14,298});
    states[298] = new State(-85);
    states[299] = new State(new int[]{52,118,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,13,91,10,304,11,308,17,189,14,-86},new int[]{-62,300,-63,299,-64,301,-65,302,-114,19,-125,47,-24,51,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-117,90,-66,303,-17,312});
    states[300] = new State(-87);
    states[301] = new State(-88);
    states[302] = new State(-90);
    states[303] = new State(-91);
    states[304] = new State(-92,new int[]{-67,305});
    states[305] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,41,103},new int[]{-39,306,-121,26,-123,30,-24,33,-127,41,-42,100,-86,54,-97,58,-134,59,-128,73});
    states[306] = new State(new int[]{38,307});
    states[307] = new State(-93);
    states[308] = new State(-94,new int[]{-68,309});
    states[309] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,41,103},new int[]{-39,310,-121,26,-123,30,-24,33,-127,41,-42,100,-86,54,-97,58,-134,59,-128,73});
    states[310] = new State(new int[]{38,311});
    states[311] = new State(-95);
    states[312] = new State(new int[]{52,118,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87,13,91,10,304,11,308},new int[]{-64,313,-65,302,-114,19,-125,47,-24,51,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73,-117,90,-66,303});
    states[313] = new State(-89);
    states[314] = new State(new int[]{13,-96,17,-97},new int[]{-70,315});
    states[315] = new State(new int[]{17,202},new int[]{-3,316});
    states[316] = new State(-98);
    states[317] = new State(new int[]{22,318});
    states[318] = new State(new int[]{15,319});
    states[319] = new State(-99,new int[]{-72,320});
    states[320] = new State(new int[]{52,326},new int[]{-73,321,-87,323});
    states[321] = new State(new int[]{16,322});
    states[322] = new State(-100);
    states[323] = new State(new int[]{40,324,16,-127});
    states[324] = new State(new int[]{52,326},new int[]{-73,325,-87,323});
    states[325] = new State(-128);
    states[326] = new State(new int[]{25,215});
    states[327] = new State(new int[]{16,328,52,334},new int[]{-31,329,-88,331,-87,337});
    states[328] = new State(-101);
    states[329] = new State(new int[]{16,330});
    states[330] = new State(-102);
    states[331] = new State(new int[]{40,332,16,-131});
    states[332] = new State(new int[]{52,334},new int[]{-31,333,-88,331,-87,337});
    states[333] = new State(-132);
    states[334] = new State(new int[]{24,335,25,215});
    states[335] = new State(new int[]{52,128,53,129,13,130},new int[]{-89,336,-109,124,-110,127});
    states[336] = new State(-129);
    states[337] = new State(-130);
    states[338] = new State(new int[]{52,339});
    states[339] = new State(-73,new int[]{-54,340});
    states[340] = new State(new int[]{15,327},new int[]{-55,341,-56,342,-69,314,-71,317});
    states[341] = new State(-74);
    states[342] = new State(new int[]{13,343});
    states[343] = new State(new int[]{14,344,52,-76,53,-76,17,-76},new int[]{-57,345});
    states[344] = new State(-75);
    states[345] = new State(new int[]{52,52,53,53,17,189},new int[]{-58,346,-59,348,-20,350,-90,351,-42,368,-17,372});
    states[346] = new State(new int[]{14,347});
    states[347] = new State(-77);
    states[348] = new State(new int[]{52,52,53,53,17,189,14,-78},new int[]{-58,349,-59,348,-20,350,-90,351,-42,368,-17,372});
    states[349] = new State(-79);
    states[350] = new State(-80);
    states[351] = new State(new int[]{34,352});
    states[352] = new State(new int[]{52,214},new int[]{-92,353,-52,355,-87,213,-99,221});
    states[353] = new State(new int[]{38,354});
    states[354] = new State(-134);
    states[355] = new State(new int[]{15,356});
    states[356] = new State(new int[]{16,357,52,365,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-94,358,-95,360,-24,364,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[357] = new State(-138);
    states[358] = new State(new int[]{16,359});
    states[359] = new State(-139);
    states[360] = new State(new int[]{16,-140,40,-141},new int[]{-96,361});
    states[361] = new State(new int[]{40,362});
    states[362] = new State(new int[]{52,365,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-94,363,-95,360,-24,364,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[363] = new State(-142);
    states[364] = new State(new int[]{74,36,73,37,72,38,70,39,71,40,40,-143,16,-143},new int[]{-129,34});
    states[365] = new State(new int[]{23,366,15,-234,74,-234,73,-234,72,-234,70,-234,71,-234,40,-234,16,-234});
    states[366] = new State(new int[]{57,71,61,72},new int[]{-97,367,-134,59});
    states[367] = new State(-144);
    states[368] = new State(new int[]{34,-145,40,-146},new int[]{-98,369});
    states[369] = new State(new int[]{40,370});
    states[370] = new State(new int[]{52,52,53,53},new int[]{-90,371,-42,368});
    states[371] = new State(-147);
    states[372] = new State(new int[]{52,52,53,53},new int[]{-20,373,-90,351,-42,368});
    states[373] = new State(-81);
    states[374] = new State(-12);
    states[375] = new State(-13);
    states[376] = new State(new int[]{13,377});
    states[377] = new State(new int[]{14,378,32,-15,33,-15,30,-15,31,-15,17,-15},new int[]{-13,379});
    states[378] = new State(-14);
    states[379] = new State(new int[]{32,386,33,391,30,394,31,405,17,189},new int[]{-14,380,-15,382,-16,384,-18,385,-17,408});
    states[380] = new State(new int[]{14,381});
    states[381] = new State(-16);
    states[382] = new State(new int[]{32,386,33,391,30,394,31,405,17,189,14,-17},new int[]{-14,383,-15,382,-16,384,-18,385,-17,408});
    states[383] = new State(-18);
    states[384] = new State(-19);
    states[385] = new State(-21);
    states[386] = new State(new int[]{52,387});
    states[387] = new State(new int[]{34,388});
    states[388] = new State(new int[]{52,52,53,53,54,55,55,56,56,57,57,71,61,72,71,75,76,76,15,87},new int[]{-24,389,-127,41,-42,42,-86,54,-97,58,-134,59,-128,73});
    states[389] = new State(new int[]{38,390,74,36,73,37,72,38,70,39,71,40},new int[]{-129,34});
    states[390] = new State(-28);
    states[391] = new State(-22,new int[]{-19,392});
    states[392] = new State(new int[]{52,52,53,53},new int[]{-20,393,-90,351,-42,368});
    states[393] = new State(-23);
    states[394] = new State(-24,new int[]{-21,395});
    states[395] = new State(new int[]{52,52,53,53},new int[]{-22,396,-90,397,-42,368});
    states[396] = new State(-25);
    states[397] = new State(new int[]{34,398});
    states[398] = new State(new int[]{52,214},new int[]{-91,399,-92,401,-52,355,-87,213,-99,221});
    states[399] = new State(new int[]{38,400});
    states[400] = new State(-133);
    states[401] = new State(new int[]{38,-135,39,-136},new int[]{-93,402});
    states[402] = new State(new int[]{39,403});
    states[403] = new State(new int[]{52,214},new int[]{-91,404,-92,401,-52,355,-87,213,-99,221});
    states[404] = new State(-137);
    states[405] = new State(-26,new int[]{-23,406});
    states[406] = new State(new int[]{52,52,53,53},new int[]{-22,407,-90,397,-42,368});
    states[407] = new State(-27);
    states[408] = new State(new int[]{32,386,33,391,30,394,31,405},new int[]{-16,409,-18,385});
    states[409] = new State(-20);
    states[410] = new State(new int[]{13,-29,17,-30},new int[]{-26,411});
    states[411] = new State(new int[]{17,202},new int[]{-3,412});
    states[412] = new State(-31);
    states[413] = new State(new int[]{52,414});
    states[414] = new State(-32,new int[]{-27,415});
    states[415] = new State(new int[]{15,420},new int[]{-28,416});
    states[416] = new State(new int[]{21,417});
    states[417] = new State(-33,new int[]{-29,418});
    states[418] = new State(new int[]{52,214},new int[]{-30,419,-52,210,-87,213,-99,221});
    states[419] = new State(-34);
    states[420] = new State(new int[]{16,421,52,334},new int[]{-31,422,-88,331,-87,337});
    states[421] = new State(-35);
    states[422] = new State(new int[]{16,423});
    states[423] = new State(-36);
    states[424] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-1, new int[]{-4});
    rules[5] = new Rule(-1, new int[]{-3,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-6, new int[]{});
    rules[8] = new Rule(-4, new int[]{-5,-6,-4});
    rules[9] = new Rule(-5, new int[]{-7});
    rules[10] = new Rule(-5, new int[]{-8});
    rules[11] = new Rule(-5, new int[]{-9});
    rules[12] = new Rule(-5, new int[]{-10});
    rules[13] = new Rule(-5, new int[]{-11});
    rules[14] = new Rule(-11, new int[]{-12,13,14});
    rules[15] = new Rule(-13, new int[]{});
    rules[16] = new Rule(-11, new int[]{-12,13,-13,-14,14});
    rules[17] = new Rule(-14, new int[]{-15});
    rules[18] = new Rule(-14, new int[]{-15,-14});
    rules[19] = new Rule(-15, new int[]{-16});
    rules[20] = new Rule(-15, new int[]{-17,-16});
    rules[21] = new Rule(-16, new int[]{-18});
    rules[22] = new Rule(-19, new int[]{});
    rules[23] = new Rule(-16, new int[]{33,-19,-20});
    rules[24] = new Rule(-21, new int[]{});
    rules[25] = new Rule(-16, new int[]{30,-21,-22});
    rules[26] = new Rule(-23, new int[]{});
    rules[27] = new Rule(-16, new int[]{31,-23,-22});
    rules[28] = new Rule(-18, new int[]{32,52,34,-24,38});
    rules[29] = new Rule(-12, new int[]{-25});
    rules[30] = new Rule(-26, new int[]{});
    rules[31] = new Rule(-12, new int[]{-25,-26,-3});
    rules[32] = new Rule(-27, new int[]{});
    rules[33] = new Rule(-29, new int[]{});
    rules[34] = new Rule(-25, new int[]{8,52,-27,-28,21,-29,-30});
    rules[35] = new Rule(-28, new int[]{15,16});
    rules[36] = new Rule(-28, new int[]{15,-31,16});
    rules[37] = new Rule(-8, new int[]{-32,13,14});
    rules[38] = new Rule(-8, new int[]{-32,13,-33,14});
    rules[39] = new Rule(-33, new int[]{-34});
    rules[40] = new Rule(-33, new int[]{-34,-33});
    rules[41] = new Rule(-34, new int[]{-35});
    rules[42] = new Rule(-34, new int[]{-36});
    rules[43] = new Rule(-36, new int[]{-37});
    rules[44] = new Rule(-36, new int[]{-17,-37});
    rules[45] = new Rule(-38, new int[]{});
    rules[46] = new Rule(-37, new int[]{10,-38,-39,38});
    rules[47] = new Rule(-40, new int[]{});
    rules[48] = new Rule(-37, new int[]{11,-40,-39,38});
    rules[49] = new Rule(-43, new int[]{});
    rules[50] = new Rule(-37, new int[]{11,-41,54,-42,-43,38});
    rules[51] = new Rule(-35, new int[]{-44,38});
    rules[52] = new Rule(-35, new int[]{-17,-44,38});
    rules[53] = new Rule(-35, new int[]{-44,40,-35});
    rules[54] = new Rule(-35, new int[]{-17,-44,40,-35});
    rules[55] = new Rule(-44, new int[]{-24});
    rules[56] = new Rule(-45, new int[]{});
    rules[57] = new Rule(-44, new int[]{52,42,-45,-24});
    rules[58] = new Rule(-41, new int[]{27});
    rules[59] = new Rule(-41, new int[]{29});
    rules[60] = new Rule(-41, new int[]{28});
    rules[61] = new Rule(-32, new int[]{-46});
    rules[62] = new Rule(-47, new int[]{});
    rules[63] = new Rule(-32, new int[]{-46,-47,-3});
    rules[64] = new Rule(-46, new int[]{-48});
    rules[65] = new Rule(-49, new int[]{});
    rules[66] = new Rule(-46, new int[]{-48,19,-49,-30});
    rules[67] = new Rule(-50, new int[]{});
    rules[68] = new Rule(-46, new int[]{-48,20,-50,-30});
    rules[69] = new Rule(-51, new int[]{});
    rules[70] = new Rule(-48, new int[]{5,52,-51,21,-52});
    rules[71] = new Rule(-53, new int[]{});
    rules[72] = new Rule(-48, new int[]{9,5,52,-53,21,-52});
    rules[73] = new Rule(-54, new int[]{});
    rules[74] = new Rule(-10, new int[]{6,7,52,-54,-55});
    rules[75] = new Rule(-55, new int[]{-56,13,14});
    rules[76] = new Rule(-57, new int[]{});
    rules[77] = new Rule(-55, new int[]{-56,13,-57,-58,14});
    rules[78] = new Rule(-58, new int[]{-59});
    rules[79] = new Rule(-58, new int[]{-59,-58});
    rules[80] = new Rule(-59, new int[]{-20});
    rules[81] = new Rule(-59, new int[]{-17,-20});
    rules[82] = new Rule(-60, new int[]{});
    rules[83] = new Rule(-9, new int[]{6,52,-60,-61});
    rules[84] = new Rule(-61, new int[]{-56,13,14});
    rules[85] = new Rule(-61, new int[]{-56,13,-62,14});
    rules[86] = new Rule(-62, new int[]{-63});
    rules[87] = new Rule(-62, new int[]{-63,-62});
    rules[88] = new Rule(-63, new int[]{-64});
    rules[89] = new Rule(-63, new int[]{-17,-64});
    rules[90] = new Rule(-64, new int[]{-65});
    rules[91] = new Rule(-64, new int[]{-66});
    rules[92] = new Rule(-67, new int[]{});
    rules[93] = new Rule(-64, new int[]{10,-67,-39,38});
    rules[94] = new Rule(-68, new int[]{});
    rules[95] = new Rule(-64, new int[]{11,-68,-39,38});
    rules[96] = new Rule(-56, new int[]{-69});
    rules[97] = new Rule(-70, new int[]{});
    rules[98] = new Rule(-56, new int[]{-69,-70,-3});
    rules[99] = new Rule(-72, new int[]{});
    rules[100] = new Rule(-69, new int[]{-71,22,15,-72,-73,16});
    rules[101] = new Rule(-71, new int[]{15,16});
    rules[102] = new Rule(-71, new int[]{15,-31,16});
    rules[103] = new Rule(-7, new int[]{-74,13,14});
    rules[104] = new Rule(-7, new int[]{-74,13,-75,14});
    rules[105] = new Rule(-75, new int[]{-76});
    rules[106] = new Rule(-75, new int[]{-76,-75});
    rules[107] = new Rule(-76, new int[]{-77});
    rules[108] = new Rule(-76, new int[]{-17,-77});
    rules[109] = new Rule(-77, new int[]{-65});
    rules[110] = new Rule(-77, new int[]{-66});
    rules[111] = new Rule(-78, new int[]{});
    rules[112] = new Rule(-77, new int[]{12,-78,-39,38});
    rules[113] = new Rule(-74, new int[]{-79});
    rules[114] = new Rule(-80, new int[]{});
    rules[115] = new Rule(-74, new int[]{-79,-80,-3});
    rules[116] = new Rule(-79, new int[]{4,52});
    rules[117] = new Rule(-81, new int[]{});
    rules[118] = new Rule(-79, new int[]{4,52,20,-81,-30});
    rules[119] = new Rule(-82, new int[]{});
    rules[120] = new Rule(-79, new int[]{4,52,19,-82,-30});
    rules[121] = new Rule(-3, new int[]{17,-83,18});
    rules[122] = new Rule(-84, new int[]{});
    rules[123] = new Rule(-17, new int[]{17,-84,-83,18});
    rules[124] = new Rule(-83, new int[]{-85});
    rules[125] = new Rule(-83, new int[]{-85,40,-83});
    rules[126] = new Rule(-85, new int[]{-42,34,-86});
    rules[127] = new Rule(-73, new int[]{-87});
    rules[128] = new Rule(-73, new int[]{-87,40,-73});
    rules[129] = new Rule(-88, new int[]{52,24,-89});
    rules[130] = new Rule(-88, new int[]{-87});
    rules[131] = new Rule(-31, new int[]{-88});
    rules[132] = new Rule(-31, new int[]{-88,40,-31});
    rules[133] = new Rule(-22, new int[]{-90,34,-91,38});
    rules[134] = new Rule(-20, new int[]{-90,34,-92,38});
    rules[135] = new Rule(-91, new int[]{-92});
    rules[136] = new Rule(-93, new int[]{});
    rules[137] = new Rule(-91, new int[]{-92,-93,39,-91});
    rules[138] = new Rule(-92, new int[]{-52,15,16});
    rules[139] = new Rule(-92, new int[]{-52,15,-94,16});
    rules[140] = new Rule(-94, new int[]{-95});
    rules[141] = new Rule(-96, new int[]{});
    rules[142] = new Rule(-94, new int[]{-95,-96,40,-94});
    rules[143] = new Rule(-95, new int[]{-24});
    rules[144] = new Rule(-95, new int[]{52,23,-97});
    rules[145] = new Rule(-90, new int[]{-42});
    rules[146] = new Rule(-98, new int[]{});
    rules[147] = new Rule(-90, new int[]{-42,-98,40,-90});
    rules[148] = new Rule(-30, new int[]{-52});
    rules[149] = new Rule(-30, new int[]{-52,40,-30});
    rules[150] = new Rule(-52, new int[]{-87});
    rules[151] = new Rule(-52, new int[]{-99});
    rules[152] = new Rule(-87, new int[]{52,25,52});
    rules[153] = new Rule(-87, new int[]{52,25,52,23,-97});
    rules[154] = new Rule(-99, new int[]{52});
    rules[155] = new Rule(-99, new int[]{52,23,-97});
    rules[156] = new Rule(-100, new int[]{});
    rules[157] = new Rule(-66, new int[]{52,-100,35,-101,38});
    rules[158] = new Rule(-101, new int[]{-89});
    rules[159] = new Rule(-102, new int[]{});
    rules[160] = new Rule(-101, new int[]{15,-102,-103,16});
    rules[161] = new Rule(-104, new int[]{});
    rules[162] = new Rule(-101, new int[]{51,-104,15,-103,16});
    rules[163] = new Rule(-105, new int[]{});
    rules[164] = new Rule(-101, new int[]{45,-105,15,-103,16});
    rules[165] = new Rule(-101, new int[]{-106,15,-103,-107,-103,16});
    rules[166] = new Rule(-106, new int[]{46});
    rules[167] = new Rule(-106, new int[]{47});
    rules[168] = new Rule(-106, new int[]{48});
    rules[169] = new Rule(-106, new int[]{49});
    rules[170] = new Rule(-103, new int[]{-108});
    rules[171] = new Rule(-103, new int[]{-108,40,-103});
    rules[172] = new Rule(-108, new int[]{-89});
    rules[173] = new Rule(-108, new int[]{50,-89});
    rules[174] = new Rule(-108, new int[]{52,24,-89});
    rules[175] = new Rule(-108, new int[]{52,24,50,-89});
    rules[176] = new Rule(-107, new int[]{43});
    rules[177] = new Rule(-107, new int[]{44});
    rules[178] = new Rule(-89, new int[]{-109});
    rules[179] = new Rule(-89, new int[]{-109,70,-89});
    rules[180] = new Rule(-109, new int[]{-110});
    rules[181] = new Rule(-111, new int[]{});
    rules[182] = new Rule(-109, new int[]{13,-111,-112,14});
    rules[183] = new Rule(-110, new int[]{52});
    rules[184] = new Rule(-110, new int[]{53});
    rules[185] = new Rule(-112, new int[]{-113});
    rules[186] = new Rule(-112, new int[]{-113,40,-112});
    rules[187] = new Rule(-113, new int[]{54});
    rules[188] = new Rule(-113, new int[]{55});
    rules[189] = new Rule(-113, new int[]{56});
    rules[190] = new Rule(-113, new int[]{-97});
    rules[191] = new Rule(-113, new int[]{52});
    rules[192] = new Rule(-113, new int[]{53});
    rules[193] = new Rule(-113, new int[]{54,26,54});
    rules[194] = new Rule(-115, new int[]{});
    rules[195] = new Rule(-65, new int[]{-114,-115,38});
    rules[196] = new Rule(-116, new int[]{});
    rules[197] = new Rule(-65, new int[]{-114,36,-116,-39,38});
    rules[198] = new Rule(-118, new int[]{});
    rules[199] = new Rule(-117, new int[]{13,-118,-114,-119});
    rules[200] = new Rule(-119, new int[]{14});
    rules[201] = new Rule(-120, new int[]{});
    rules[202] = new Rule(-119, new int[]{37,-120,-39,14});
    rules[203] = new Rule(-39, new int[]{-121});
    rules[204] = new Rule(-122, new int[]{});
    rules[205] = new Rule(-39, new int[]{-121,-122,39,-39});
    rules[206] = new Rule(-121, new int[]{-123});
    rules[207] = new Rule(-121, new int[]{-123,40,-121});
    rules[208] = new Rule(-123, new int[]{-24});
    rules[209] = new Rule(-123, new int[]{-42,42,-24});
    rules[210] = new Rule(-123, new int[]{41,-117});
    rules[211] = new Rule(-123, new int[]{41,-24});
    rules[212] = new Rule(-123, new int[]{41,-42,42,-24});
    rules[213] = new Rule(-123, new int[]{-24,-124,-24});
    rules[214] = new Rule(-114, new int[]{-125});
    rules[215] = new Rule(-126, new int[]{});
    rules[216] = new Rule(-114, new int[]{-125,-126,40,-114});
    rules[217] = new Rule(-125, new int[]{-24});
    rules[218] = new Rule(-125, new int[]{-117});
    rules[219] = new Rule(-24, new int[]{-127});
    rules[220] = new Rule(-24, new int[]{-128,-24});
    rules[221] = new Rule(-24, new int[]{-24,-129,-24});
    rules[222] = new Rule(-130, new int[]{});
    rules[223] = new Rule(-24, new int[]{-42,15,-130,-114,16});
    rules[224] = new Rule(-131, new int[]{});
    rules[225] = new Rule(-24, new int[]{76,-131,-132,77});
    rules[226] = new Rule(-24, new int[]{15,-24,16});
    rules[227] = new Rule(-132, new int[]{-133});
    rules[228] = new Rule(-132, new int[]{-133,-132});
    rules[229] = new Rule(-133, new int[]{80});
    rules[230] = new Rule(-133, new int[]{81});
    rules[231] = new Rule(-133, new int[]{78,-24,79});
    rules[232] = new Rule(-127, new int[]{-42});
    rules[233] = new Rule(-127, new int[]{-86});
    rules[234] = new Rule(-42, new int[]{52});
    rules[235] = new Rule(-42, new int[]{53});
    rules[236] = new Rule(-86, new int[]{54});
    rules[237] = new Rule(-86, new int[]{55});
    rules[238] = new Rule(-86, new int[]{56});
    rules[239] = new Rule(-86, new int[]{-97});
    rules[240] = new Rule(-128, new int[]{71});
    rules[241] = new Rule(-129, new int[]{74});
    rules[242] = new Rule(-129, new int[]{73});
    rules[243] = new Rule(-129, new int[]{72});
    rules[244] = new Rule(-129, new int[]{70});
    rules[245] = new Rule(-129, new int[]{71});
    rules[246] = new Rule(-124, new int[]{34});
    rules[247] = new Rule(-124, new int[]{65});
    rules[248] = new Rule(-124, new int[]{66});
    rules[249] = new Rule(-124, new int[]{69});
    rules[250] = new Rule(-124, new int[]{67});
    rules[251] = new Rule(-124, new int[]{68});
    rules[252] = new Rule(-124, new int[]{24});
    rules[253] = new Rule(-97, new int[]{-134,-135,-136});
    rules[254] = new Rule(-97, new int[]{-134,-136});
    rules[255] = new Rule(-134, new int[]{57});
    rules[256] = new Rule(-134, new int[]{61});
    rules[257] = new Rule(-135, new int[]{-137});
    rules[258] = new Rule(-135, new int[]{-137,-135});
    rules[259] = new Rule(-137, new int[]{58});
    rules[260] = new Rule(-137, new int[]{59});
    rules[261] = new Rule(-137, new int[]{62});
    rules[262] = new Rule(-137, new int[]{63});
    rules[263] = new Rule(-136, new int[]{60});
    rules[264] = new Rule(-136, new int[]{64});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 6: // ModuleList -> Module
#line 58 "API/Parser/parser.y"
                 { EndModule(); }
#line default
        break;
      case 7: // Anon@1 -> /* empty */
#line 59 "API/Parser/parser.y"
                 { EndModule(); }
#line default
        break;
      case 15: // Anon@2 -> /* empty */
#line 79 "API/Parser/parser.y"
             { SetModRefState(ModRefState.ModApply); }
#line default
        break;
      case 22: // Anon@3 -> /* empty */
#line 98 "API/Parser/parser.y"
               { IsBuildingUpdate = false; }
#line default
        break;
      case 24: // Anon@4 -> /* empty */
#line 100 "API/Parser/parser.y"
               { IsBuildingNext = false; IsBuildingUpdate = true; }
#line default
        break;
      case 26: // Anon@5 -> /* empty */
#line 102 "API/Parser/parser.y"
               { IsBuildingNext = true; IsBuildingUpdate = true;  }
#line default
        break;
      case 28: // MachineProp -> PROPERTY, BAREID, EQ, FuncTerm, DOT
#line 111 "API/Parser/parser.y"
              { AppendProperty(ValueStack[ValueStack.Depth-4].str, ToSpan(LocationStack[LocationStack.Depth-5])); }
#line default
        break;
      case 29: // MachineSigConfig -> MachineSig
#line 117 "API/Parser/parser.y"
                   { SetModRefState(ModRefState.None);  }
#line default
        break;
      case 30: // Anon@6 -> /* empty */
#line 118 "API/Parser/parser.y"
                   { SetModRefState(ModRefState.None);  }
#line default
        break;
      case 32: // Anon@7 -> /* empty */
#line 124 "API/Parser/parser.y"
                  { StartMachine(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 33: // Anon@8 -> /* empty */
#line 126 "API/Parser/parser.y"
         { SetModRefState(ModRefState.Other); }
#line default
        break;
      case 45: // Anon@9 -> /* empty */
#line 169 "API/Parser/parser.y"
               { StartPropContract(ContractKind.EnsuresProp, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 47: // Anon@10 -> /* empty */
#line 173 "API/Parser/parser.y"
               { StartPropContract(ContractKind.RequiresProp, ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 49: // Anon@11 -> /* empty */
#line 180 "API/Parser/parser.y"
                { AppendCardContract(ValueStack[ValueStack.Depth-3].str, ParseInt(ValueStack[ValueStack.Depth-2].str, ToSpan(LocationStack[LocationStack.Depth-2])), ToSpan(LocationStack[LocationStack.Depth-4])); }
#line default
        break;
      case 55: // ModelFact -> FuncTerm
#line 203 "API/Parser/parser.y"
                  { AppendFact(MkFact(false, ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 56: // Anon@12 -> /* empty */
#line 205 "API/Parser/parser.y"
               { PushArg(new Nodes.Id(ToSpan(LocationStack[LocationStack.Depth-2]), ValueStack[ValueStack.Depth-2].str));  }
#line default
        break;
      case 57: // ModelFact -> BAREID, IS, Anon@12, FuncTerm
#line 206 "API/Parser/parser.y"
               { AppendFact(MkFact(true, ToSpan(LocationStack[LocationStack.Depth-4]))); }
#line default
        break;
      case 61: // ModelSigConfig -> ModelSig
#line 218 "API/Parser/parser.y"
                 { SetModRefState(ModRefState.None); }
#line default
        break;
      case 62: // Anon@13 -> /* empty */
#line 219 "API/Parser/parser.y"
                 { SetModRefState(ModRefState.None); }
#line default
        break;
      case 65: // Anon@14 -> /* empty */
#line 226 "API/Parser/parser.y"
               { SetCompose(ComposeKind.Includes); SetModRefState(ModRefState.Input); }
#line default
        break;
      case 67: // Anon@15 -> /* empty */
#line 229 "API/Parser/parser.y"
              { SetCompose(ComposeKind.Extends); SetModRefState(ModRefState.Input); }
#line default
        break;
      case 69: // Anon@16 -> /* empty */
#line 235 "API/Parser/parser.y"
            { StartModel(ValueStack[ValueStack.Depth-1].str, false, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 71: // Anon@17 -> /* empty */
#line 241 "API/Parser/parser.y"
            { StartModel(ValueStack[ValueStack.Depth-1].str, true, ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 73: // Anon@18 -> /* empty */
#line 251 "API/Parser/parser.y"
                  { StartTSystem(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 76: // Anon@19 -> /* empty */
#line 261 "API/Parser/parser.y"
               { IsBuildingUpdate = false; SetModRefState(ModRefState.ModApply); }
#line default
        break;
      case 82: // Anon@20 -> /* empty */
#line 282 "API/Parser/parser.y"
                  { StartTransform(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 92: // Anon@21 -> /* empty */
#line 312 "API/Parser/parser.y"
               { StartPropContract(ContractKind.EnsuresProp, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 94: // Anon@22 -> /* empty */
#line 315 "API/Parser/parser.y"
               { StartPropContract(ContractKind.RequiresProp, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 96: // TransformSigConfig -> TransformSig
#line 323 "API/Parser/parser.y"
                   { SetModRefState(ModRefState.None);  }
#line default
        break;
      case 97: // Anon@23 -> /* empty */
#line 324 "API/Parser/parser.y"
                   { SetModRefState(ModRefState.None);  }
#line default
        break;
      case 99: // Anon@24 -> /* empty */
#line 331 "API/Parser/parser.y"
                   { SetModRefState(ModRefState.Output); }
#line default
        break;
      case 111: // Anon@25 -> /* empty */
#line 372 "API/Parser/parser.y"
             { StartPropContract(ContractKind.ConformsProp, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 113: // DomainSigConfig -> DomainSig
#line 380 "API/Parser/parser.y"
               { SetModRefState(ModRefState.None);  }
#line default
        break;
      case 114: // Anon@26 -> /* empty */
#line 381 "API/Parser/parser.y"
               { SetModRefState(ModRefState.None);  }
#line default
        break;
      case 116: // DomainSig -> DOMAIN, BAREID
#line 387 "API/Parser/parser.y"
               { StartDomain(ValueStack[ValueStack.Depth-1].str, ComposeKind.None, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 117: // Anon@27 -> /* empty */
#line 391 "API/Parser/parser.y"
               { StartDomain(ValueStack[ValueStack.Depth-2].str, ComposeKind.Extends, ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 119: // Anon@28 -> /* empty */
#line 396 "API/Parser/parser.y"
              { StartDomain(ValueStack[ValueStack.Depth-2].str, ComposeKind.Includes, ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 122: // Anon@29 -> /* empty */
#line 409 "API/Parser/parser.y"
                    { StartSentenceConfig(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 126: // Setting -> Id, EQ, Constant
#line 424 "API/Parser/parser.y"
             { AppendSetting(); }
#line default
        break;
      case 129: // ValOrModelParam -> BAREID, COLON, UnnBody
#line 439 "API/Parser/parser.y"
                   { AppendParam(ValueStack[ValueStack.Depth-3].str, ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 133: // Update -> StepOrUpdateLHS, EQ, ChoiceList, DOT
#line 456 "API/Parser/parser.y"
           { AppendUpdate(); }
#line default
        break;
      case 134: // Step -> StepOrUpdateLHS, EQ, ModApply, DOT
#line 463 "API/Parser/parser.y"
           { AppendStep(); }
#line default
        break;
      case 135: // ChoiceList -> ModApply
#line 467 "API/Parser/parser.y"
                  { AppendChoice(); }
#line default
        break;
      case 136: // Anon@30 -> /* empty */
#line 468 "API/Parser/parser.y"
                  { AppendChoice(); }
#line default
        break;
      case 138: // ModApply -> ModRef, LPAREN, RPAREN
#line 476 "API/Parser/parser.y"
                   { PushArg(MkModApply()); }
#line default
        break;
      case 139: // ModApply -> ModRef, LPAREN, ModArgList, RPAREN
#line 481 "API/Parser/parser.y"
                   { PushArg(MkModApply()); }
#line default
        break;
      case 140: // ModArgList -> ModAppArg
#line 485 "API/Parser/parser.y"
                     { IncArity(); }
#line default
        break;
      case 141: // Anon@31 -> /* empty */
#line 486 "API/Parser/parser.y"
                     { IncArity(); }
#line default
        break;
      case 144: // ModAppArg -> BAREID, AT, String
#line 495 "API/Parser/parser.y"
                      { PushArg(new Nodes.ModRef(ToSpan(LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-3].str, null, GetStringValue())); }
#line default
        break;
      case 145: // StepOrUpdateLHS -> Id
#line 499 "API/Parser/parser.y"
           { AppendLHS(); }
#line default
        break;
      case 146: // Anon@32 -> /* empty */
#line 500 "API/Parser/parser.y"
           { AppendLHS(); }
#line default
        break;
      case 152: // ModRefRename -> BAREID, RENAMES, BAREID
#line 522 "API/Parser/parser.y"
             { AppendModRef(new Nodes.ModRef(ToSpan(LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-1].str, ValueStack[ValueStack.Depth-3].str, null)); }
#line default
        break;
      case 153: // ModRefRename -> BAREID, RENAMES, BAREID, AT, String
#line 528 "API/Parser/parser.y"
             { AppendModRef(new Nodes.ModRef(ToSpan(LocationStack[LocationStack.Depth-5]), ValueStack[ValueStack.Depth-3].str, ValueStack[ValueStack.Depth-5].str, GetStringValue())); }
#line default
        break;
      case 154: // ModRefNoRename -> BAREID
#line 532 "API/Parser/parser.y"
                { AppendModRef(new Nodes.ModRef(ToSpan(LocationStack[LocationStack.Depth-1]), ValueStack[ValueStack.Depth-1].str, null, null)); }
#line default
        break;
      case 155: // ModRefNoRename -> BAREID, AT, String
#line 535 "API/Parser/parser.y"
             { AppendModRef(new Nodes.ModRef(ToSpan(LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-3].str, null, GetStringValue())); }
#line default
        break;
      case 156: // Anon@33 -> /* empty */
#line 541 "API/Parser/parser.y"
                   { SaveTypeDeclName(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 158: // TypeDeclBody -> UnnBody
#line 548 "API/Parser/parser.y"
                         { EndUnnDecl(); }
#line default
        break;
      case 159: // Anon@34 -> /* empty */
#line 550 "API/Parser/parser.y"
             { StartConDecl(false, false); }
#line default
        break;
      case 160: // TypeDeclBody -> LPAREN, Anon@34, Fields, RPAREN
#line 552 "API/Parser/parser.y"
                   { EndTypeDecl(); }
#line default
        break;
      case 161: // Anon@35 -> /* empty */
#line 554 "API/Parser/parser.y"
                 { StartConDecl(false, true); }
#line default
        break;
      case 162: // TypeDeclBody -> SUB, Anon@35, LPAREN, Fields, RPAREN
#line 557 "API/Parser/parser.y"
                   { EndTypeDecl(); }
#line default
        break;
      case 163: // Anon@36 -> /* empty */
#line 559 "API/Parser/parser.y"
                 { StartConDecl(true, false); }
#line default
        break;
      case 164: // TypeDeclBody -> NEW, Anon@36, LPAREN, Fields, RPAREN
#line 562 "API/Parser/parser.y"
                   { EndTypeDecl(); }
#line default
        break;
      case 165: // TypeDeclBody -> FunDecl, LPAREN, Fields, MapArrow, Fields, RPAREN
#line 569 "API/Parser/parser.y"
                   { EndTypeDecl(); }
#line default
        break;
      case 166: // FunDecl -> INJ
#line 573 "API/Parser/parser.y"
                 { StartMapDecl(MapKind.Inj); }
#line default
        break;
      case 167: // FunDecl -> BIJ
#line 574 "API/Parser/parser.y"
            { StartMapDecl(MapKind.Bij); }
#line default
        break;
      case 168: // FunDecl -> SUR
#line 575 "API/Parser/parser.y"
            { StartMapDecl(MapKind.Sur); }
#line default
        break;
      case 169: // FunDecl -> FUN
#line 576 "API/Parser/parser.y"
                 { StartMapDecl(MapKind.Fun); }
#line default
        break;
      case 172: // Field -> UnnBody
#line 587 "API/Parser/parser.y"
                     { AppendField(null, false, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 173: // Field -> ANY, UnnBody
#line 589 "API/Parser/parser.y"
                  { AppendField(null, true, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 174: // Field -> BAREID, COLON, UnnBody
#line 592 "API/Parser/parser.y"
                  { AppendField(ValueStack[ValueStack.Depth-3].str, false, ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 175: // Field -> BAREID, COLON, ANY, UnnBody
#line 596 "API/Parser/parser.y"
                  { AppendField(ValueStack[ValueStack.Depth-4].str, true, ToSpan(LocationStack[LocationStack.Depth-4])); }
#line default
        break;
      case 176: // MapArrow -> WEAKARROW
#line 600 "API/Parser/parser.y"
                        { SaveMapPartiality(true); }
#line default
        break;
      case 177: // MapArrow -> STRONGARROW
#line 601 "API/Parser/parser.y"
                     { SaveMapPartiality(false); }
#line default
        break;
      case 181: // Anon@37 -> /* empty */
#line 615 "API/Parser/parser.y"
                 { StartEnum(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 182: // UnnCmp -> LCBRACE, Anon@37, EnumList, RCBRACE
#line 617 "API/Parser/parser.y"
              { EndEnum(); }
#line default
        break;
      case 183: // TypeId -> BAREID
#line 621 "API/Parser/parser.y"
                   { AppendUnion(new Nodes.Id(ToSpan(LocationStack[LocationStack.Depth-1]), ValueStack[ValueStack.Depth-1].str)); }
#line default
        break;
      case 184: // TypeId -> QUALID
#line 622 "API/Parser/parser.y"
                   { AppendUnion(new Nodes.Id(ToSpan(LocationStack[LocationStack.Depth-1]), ValueStack[ValueStack.Depth-1].str)); }
#line default
        break;
      case 187: // EnumCnst -> DIGITS
#line 633 "API/Parser/parser.y"
                 { AppendEnum(ParseNumeric(ValueStack[ValueStack.Depth-1].str, false, ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 188: // EnumCnst -> REAL
#line 634 "API/Parser/parser.y"
                 { AppendEnum(ParseNumeric(ValueStack[ValueStack.Depth-1].str, false, ToSpan(LocationStack[LocationStack.Depth-1])));    }
#line default
        break;
      case 189: // EnumCnst -> FRAC
#line 635 "API/Parser/parser.y"
                 { AppendEnum(ParseNumeric(ValueStack[ValueStack.Depth-1].str, true,  ToSpan(LocationStack[LocationStack.Depth-1])));    }
#line default
        break;
      case 190: // EnumCnst -> String
#line 636 "API/Parser/parser.y"
                 { AppendEnum(GetString());  }
#line default
        break;
      case 191: // EnumCnst -> BAREID
#line 637 "API/Parser/parser.y"
                 { AppendEnum(new Nodes.Id(ToSpan(LocationStack[LocationStack.Depth-1]), ValueStack[ValueStack.Depth-1].str));  }
#line default
        break;
      case 192: // EnumCnst -> QUALID
#line 638 "API/Parser/parser.y"
                 { AppendEnum(new Nodes.Id(ToSpan(LocationStack[LocationStack.Depth-1]), ValueStack[ValueStack.Depth-1].str));  }
#line default
        break;
      case 193: // EnumCnst -> DIGITS, RANGE, DIGITS
#line 641 "API/Parser/parser.y"
                 { AppendEnum(new Nodes.Range(ToSpan(LocationStack[LocationStack.Depth-3]), ParseNumeric(ValueStack[ValueStack.Depth-3].str), ParseNumeric(ValueStack[ValueStack.Depth-1].str))); }
#line default
        break;
      case 194: // Anon@38 -> /* empty */
#line 647 "API/Parser/parser.y"
                       { EndHeads(ToSpan(LocationStack[LocationStack.Depth-1]));   }
#line default
        break;
      case 195: // Rule -> FuncTermList, Anon@38, DOT
#line 648 "API/Parser/parser.y"
                       { AppendRule(); }
#line default
        break;
      case 196: // Anon@39 -> /* empty */
#line 650 "API/Parser/parser.y"
                       { EndHeads(ToSpan(LocationStack[LocationStack.Depth-2]));  }
#line default
        break;
      case 197: // Rule -> FuncTermList, RULE, Anon@39, BodyList, DOT
#line 652 "API/Parser/parser.y"
             { AppendRule(); }
#line default
        break;
      case 198: // Anon@40 -> /* empty */
#line 656 "API/Parser/parser.y"
                   { PushComprSymbol(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 200: // ComprRest -> RCBRACE
#line 662 "API/Parser/parser.y"
                { EndComprHeads(); PushArg(MkCompr()); }
#line default
        break;
      case 201: // Anon@41 -> /* empty */
#line 663 "API/Parser/parser.y"
              { EndComprHeads(); }
#line default
        break;
      case 202: // ComprRest -> PIPE, Anon@41, BodyList, RCBRACE
#line 665 "API/Parser/parser.y"
                { PushArg(MkCompr()); }
#line default
        break;
      case 203: // BodyList -> Body
#line 669 "API/Parser/parser.y"
             { AppendBody(); }
#line default
        break;
      case 204: // Anon@42 -> /* empty */
#line 670 "API/Parser/parser.y"
                { AppendBody(); }
#line default
        break;
      case 208: // Constraint -> FuncTerm
#line 685 "API/Parser/parser.y"
                   { AppendConstraint(MkFind(false, ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 209: // Constraint -> Id, IS, FuncTerm
#line 689 "API/Parser/parser.y"
                   { AppendConstraint(MkFind(true, ToSpan(LocationStack[LocationStack.Depth-3]))); }
#line default
        break;
      case 210: // Constraint -> NO, Compr
#line 692 "API/Parser/parser.y"
                       { AppendConstraint(MkNoConstr(ToSpan(LocationStack[LocationStack.Depth-2]))); }
#line default
        break;
      case 211: // Constraint -> NO, FuncTerm
#line 695 "API/Parser/parser.y"
                   { AppendConstraint(MkNoConstr(ToSpan(LocationStack[LocationStack.Depth-2]), false)); }
#line default
        break;
      case 212: // Constraint -> NO, Id, IS, FuncTerm
#line 700 "API/Parser/parser.y"
                   { AppendConstraint(MkNoConstr(ToSpan(LocationStack[LocationStack.Depth-4]), true)); }
#line default
        break;
      case 213: // Constraint -> FuncTerm, RelOp, FuncTerm
#line 704 "API/Parser/parser.y"
                  { AppendConstraint(MkRelConstr()); }
#line default
        break;
      case 214: // FuncTermList -> FuncOrCompr
#line 708 "API/Parser/parser.y"
                       { IncArity(); }
#line default
        break;
      case 215: // Anon@43 -> /* empty */
#line 709 "API/Parser/parser.y"
                       { IncArity(); }
#line default
        break;
      case 220: // FuncTerm -> UnOp, FuncTerm
#line 723 "API/Parser/parser.y"
                         { PushArg(MkTerm(1)); }
#line default
        break;
      case 221: // FuncTerm -> FuncTerm, BinOp, FuncTerm
#line 727 "API/Parser/parser.y"
                       { PushArg(MkTerm(2)); }
#line default
        break;
      case 222: // Anon@44 -> /* empty */
#line 730 "API/Parser/parser.y"
                       { PushSymbol(); }
#line default
        break;
      case 223: // FuncTerm -> Id, LPAREN, Anon@44, FuncTermList, RPAREN
#line 732 "API/Parser/parser.y"
              { PushArg(MkTerm()); }
#line default
        break;
      case 224: // Anon@45 -> /* empty */
#line 734 "API/Parser/parser.y"
                       { PushQuote(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 225: // FuncTerm -> QSTART, Anon@45, QuoteList, QEND
#line 736 "API/Parser/parser.y"
                       { PushArg(PopQuote());   }
#line default
        break;
      case 229: // QuoteItem -> QUOTERUN
#line 750 "API/Parser/parser.y"
                { AppendQuoteRun(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 230: // QuoteItem -> QUOTEESCAPE
#line 751 "API/Parser/parser.y"
                { AppendQuoteEscape(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 231: // QuoteItem -> UQSTART, FuncTerm, UQEND
#line 754 "API/Parser/parser.y"
             { AppendUnquote(); }
#line default
        break;
      case 234: // Id -> BAREID
#line 763 "API/Parser/parser.y"
                  { PushArg(new Nodes.Id(ToSpan(LocationStack[LocationStack.Depth-1]), ValueStack[ValueStack.Depth-1].str));  }
#line default
        break;
      case 235: // Id -> QUALID
#line 764 "API/Parser/parser.y"
                  { PushArg(new Nodes.Id(ToSpan(LocationStack[LocationStack.Depth-1]), ValueStack[ValueStack.Depth-1].str));  }
#line default
        break;
      case 236: // Constant -> DIGITS
#line 768 "API/Parser/parser.y"
                { PushArg(ParseNumeric(ValueStack[ValueStack.Depth-1].str, false, ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 237: // Constant -> REAL
#line 769 "API/Parser/parser.y"
                { PushArg(ParseNumeric(ValueStack[ValueStack.Depth-1].str, false, ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 238: // Constant -> FRAC
#line 770 "API/Parser/parser.y"
                { PushArg(ParseNumeric(ValueStack[ValueStack.Depth-1].str, true,  ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 239: // Constant -> String
#line 771 "API/Parser/parser.y"
                { PushArg(GetString()); }
#line default
        break;
      case 240: // UnOp -> MINUS
#line 775 "API/Parser/parser.y"
                { PushSymbol(OpKind.Neg,   ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 241: // BinOp -> MUL
#line 779 "API/Parser/parser.y"
                  { PushSymbol(OpKind.Mul,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 242: // BinOp -> DIV
#line 780 "API/Parser/parser.y"
                  { PushSymbol(OpKind.Div,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 243: // BinOp -> MOD
#line 781 "API/Parser/parser.y"
                  { PushSymbol(OpKind.Mod,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 244: // BinOp -> PLUS
#line 782 "API/Parser/parser.y"
                  { PushSymbol(OpKind.Add,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 245: // BinOp -> MINUS
#line 783 "API/Parser/parser.y"
                 { PushSymbol(OpKind.Sub,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 246: // RelOp -> EQ
#line 786 "API/Parser/parser.y"
                     { PushSymbol(RelKind.Eq,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 247: // RelOp -> NE
#line 787 "API/Parser/parser.y"
                  { PushSymbol(RelKind.Neq, ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 248: // RelOp -> LT
#line 788 "API/Parser/parser.y"
                  { PushSymbol(RelKind.Lt,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 249: // RelOp -> LE
#line 789 "API/Parser/parser.y"
                  { PushSymbol(RelKind.Le,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 250: // RelOp -> GT
#line 790 "API/Parser/parser.y"
                  { PushSymbol(RelKind.Gt,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 251: // RelOp -> GE
#line 791 "API/Parser/parser.y"
                  { PushSymbol(RelKind.Ge,  ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 252: // RelOp -> COLON
#line 792 "API/Parser/parser.y"
                  { PushSymbol(RelKind.Typ, ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 255: // StrStart -> STRSNGSTART
#line 802 "API/Parser/parser.y"
                       { StartString(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 256: // StrStart -> STRMULSTART
#line 803 "API/Parser/parser.y"
                       { StartString(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 259: // StrBody -> STRSNG
#line 812 "API/Parser/parser.y"
                     { AppendString(ValueStack[ValueStack.Depth-1].str); }
#line default
        break;
      case 260: // StrBody -> STRSNGESC
#line 813 "API/Parser/parser.y"
                  { AppendSingleEscape(ValueStack[ValueStack.Depth-1].str); }
#line default
        break;
      case 261: // StrBody -> STRMUL
#line 814 "API/Parser/parser.y"
                     { AppendString(ValueStack[ValueStack.Depth-1].str); }
#line default
        break;
      case 262: // StrBody -> STRMULESC
#line 815 "API/Parser/parser.y"
               { AppendMultiEscape(ValueStack[ValueStack.Depth-1].str); }
#line default
        break;
      case 263: // StrEnd -> STRSNGEND
#line 818 "API/Parser/parser.y"
                    { EndString(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 264: // StrEnd -> STRMULEND
#line 819 "API/Parser/parser.y"
                    { EndString(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 822 "API/Parser/parser.y"
#line default
}
}
